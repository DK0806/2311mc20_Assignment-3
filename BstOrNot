class Node:
    """A Node in a binary tree."""
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def is_bst(node, min_val=float('-inf'), max_val=float('inf')):
    """Recursively checks if a binary tree is a BST."""
    if node is None:
        return True
    if not (min_val < node.value < max_val):
        return False
    return (is_bst(node.left, min_val, node.value) and
            is_bst(node.right, node.value, max_val))

def insert_into_binary_tree(nodes, values, index=0):
    """Inserts values into the binary tree, allowing None as valid input for missing nodes."""
    root = None
    if index < len(values) and values[index] is not None:
        root = Node(values[index])
        root.left = insert_into_binary_tree(nodes, values, 2 * index + 1)
        root.right = insert_into_binary_tree(nodes, values, 2 * index + 2)
    return root

def main():
    try:
        num_nodes = int(input("Enter the number of nodes including 'null' placeholders (up to 20): "))
        if num_nodes > 20:
            print("Invalid input")
            return

        values = []
        print("Enter the values of the nodes (use 'null' for missing nodes):")
        for _ in range(num_nodes):
            val = input()
            if val.lower() == 'null':
                values.append(None)
            else:
                values.append(int(val))
        
        root = insert_into_binary_tree(num_nodes, values)
        
        if is_bst(root):
            print("The tree is a Binary Search Tree.")
        else:
            print("The tree is not a Binary Search Tree.")
    except ValueError:
        print("Please enter valid integers or 'null' for missing nodes.")

if __name__ == "__main__":
    main()
